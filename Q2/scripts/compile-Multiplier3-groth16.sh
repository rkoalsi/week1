#!/bin/bash

# changing directories to contracts/circuits
cd contracts/circuits

# checking if Multipler3 directory exists and removes it if it does otherwise creates it if it doesn't
if [ -d "./Multipler3"]; then 
    rm -rf Multipler3
else
    mkdir Multiplier3
fi

# checking if powersOfTau exists and skips it if it does otherwise downloads it if it doesn't
if [ -f ./powersOfTau28_hez_final_10.ptau ]; then
    echo "powersOfTau28_hez_final_10.ptau already exists. Skipping."
else
    echo 'Downloading powersOfTau28_hez_final_10.ptau'
    wget https://hermez.s3-eu-west-1.amazonaws.com/powersOfTau28_hez_final_10.ptau
fi

echo "Compiling Multiplier3.circom..."

# compile circuit in two steps

# First, we tell circom to generate a Rank 1 Constraint System, Web Assembly file and witness in symbol format and place them in Mulltiplier3 directory
circom Multiplier3.circom --r1cs --wasm --sym -o Multiplier3
# Secondly, we print the statistics of the circuit generated by the previous command
snarkjs r1cs info Multiplier3/Multiplier3.r1cs

# Start a new zkey using the groth16 setup command in snarkjs
snarkjs groth16 setup Multiplier3/Multiplier3.r1cs powersOfTau28_hez_final_10.ptau Multiplier3/circuit_0000.zkey
# Making a contribution 
snarkjs zkey contribute Multiplier3/circuit_0000.zkey Multiplier3/circuit_final.zkey --name="1st Contributor Name" -v -e="random text"
# Exporting verificationkey 
snarkjs zkey export verificationkey Multiplier3/circuit_final.zkey Multiplier3/verification_key.json

# generate solidity contract
snarkjs zkey export solidityverifier Multiplier3/circuit_final.zkey ../Multiplier3Verifier.sol

cd ../..