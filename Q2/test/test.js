const { expect } = require('chai');
const { ethers } = require('hardhat');
const fs = require('fs');
const { groth16, plonk } = require('snarkjs');

function unstringifyBigInts(o) {
  if (typeof o == 'string' && /^[0-9]+$/.test(o)) {
    return BigInt(o);
  } else if (typeof o == 'string' && /^0x[0-9a-fA-F]+$/.test(o)) {
    return BigInt(o);
  } else if (Array.isArray(o)) {
    return o.map(unstringifyBigInts);
  } else if (typeof o == 'object') {
    if (o === null) return null;
    const res = {};
    const keys = Object.keys(o);
    keys.forEach((k) => {
      res[k] = unstringifyBigInts(o[k]);
    });
    return res;
  } else {
    return o;
  }
}

describe('HelloWorld', function () {
  let Verifier;
  let verifier;

  beforeEach(async function () {
    Verifier = await ethers.getContractFactory('HelloWorldVerifier');
    verifier = await Verifier.deploy();
    await verifier.deployed();
  });

  it('Should return true for correct proof', async function () {
    // [assignment] Add comments to explain what each line is doing
    // destructuring proof and public signals from async function proven by groth16
    const { proof, publicSignals } = await groth16.fullProve(
      { a: '1', b: '2' },
      'contracts/circuits/HelloWorld/HelloWorld_js/HelloWorld.wasm',
      'contracts/circuits/HelloWorld/circuit_final.zkey'
    );

    console.log('1x2 =', publicSignals[0]);
    //declaring variable which saves each publicSignal as Big Int
    const editedPublicSignals = unstringifyBigInts(publicSignals);
    //declaring variable which saves each item in proof as Big Int
    const editedProof = unstringifyBigInts(proof);
    //declaring variable which saves the array of addresses generated by proof and public signals
    const calldata = await groth16.exportSolidityCallData(
      editedProof,
      editedPublicSignals
    );
    //we are replacing the brackets with empty spaces and split based on the commas, next we map each item in the array to a string casted big integer
    const argv = calldata
      .replace(/["[\]\s]/g, '')
      .split(',')
      .map((x) => BigInt(x).toString());
    //we save the different arguments in 4 different variables pass that to the verifyProof function of the smart contract and expect the result to be true.
    const a = [argv[0], argv[1]];
    const b = [
      [argv[2], argv[3]],
      [argv[4], argv[5]],
    ];
    const c = [argv[6], argv[7]];
    const Input = argv.slice(8);

    expect(await verifier.verifyProof(a, b, c, Input)).to.be.true;
  });
  it('Should return false for invalid proof', async function () {
    let a = [0, 0];
    let b = [
      [0, 0],
      [0, 0],
    ];
    let c = [0, 0];
    let d = [0];
    expect(await verifier.verifyProof(a, b, c, d)).to.be.false;
  });
});

describe('Multiplier3 with Groth16', function () {
  let Verifier;
  let verifier;

  beforeEach(async function () {
    //[assignment] insert your script here
    Verifier = await ethers.getContractFactory('Multiplier3Verifier');
    verifier = await Verifier.deploy();
    await verifier.deployed();
  });

  it('Should return true for correct proof', async function () {
    //[assignment] insert your script here
    const { proof, publicSignals } = await groth16.fullProve(
      { a: '1', b: '2', c: '12' },
      'contracts/circuits/Multiplier3/Multiplier3_js/Multiplier3.wasm',
      'contracts/circuits/Multiplier3/circuit_final.zkey'
    );
    console.log('1x2x12=', publicSignals[0]);
    const editedPublicSignals = unstringifyBigInts(publicSignals);
    const editedProof = unstringifyBigInts(proof);
    const calldata = await groth16.exportSolidityCallData(
      editedProof,
      editedPublicSignals
    );
    const argv = calldata
      .replace(/["[\]\s]/g, '')
      .split(',')
      .map((x) => BigInt(x).toString());
    const a = [argv[0], argv[1]];
    const b = [
      [argv[2], argv[3]],
      [argv[4], argv[5]],
    ];
    const c = [argv[6], argv[7]];
    const OP = argv.slice(8);
    expect(await verifier.verifyProof(a, b, c, OP)).to.be.true;
  });
  it('Should return false for invalid proof', async function () {
    //[assignment] insert your script here
    let a = [0, 0];
    let b = [
      [0, 0],
      [0, 0],
    ];
    let c = [0, 0];
    let d = [0];
    expect(await verifier.verifyProof(a, b, c, d)).to.be.false;
  });
});

describe('Multiplier3 with PLONK', function () {
  let Verifier;
  let verifier;
  beforeEach(async function () {
    //[assignment] insert your script here
    Verifier = await ethers.getContractFactory('PlonkVerifier');
    verifier = await Verifier.deploy();
    await verifier.deployed();
  });

  it('Should return true for correct proof', async function () {
    //[assignment] insert your script here
    const { publicSignals } = await plonk.fullProve(
      { a: '1', b: '2', c: '12' },
      'contracts/circuits/Multiplier3_plonk/Multiplier3_js/Multiplier3.wasm',
      'contracts/circuits/Multiplier3_plonk/circuit_final.zkey'
    );
    console.log('1x2x12=', publicSignals[0]);
    var text = fs.readFileSync(
      'contracts/circuits/Multiplier3_plonk/call.txt',
      'utf-8'
    );
    var calldata = text.split(',');
    expect(await verifier.verifyProof(calldata[0], JSON.parse(calldata[1]))).to
      .be.true;
  });
  it('Should return false for invalid proof', async function () {
    //[assignment] insert your script here
    let a = '0x00';
    let b = ['0'];
    expect(await verifier.verifyProof(a, b)).to.be.false;
  });
});
